using Xunit;
using Moq;
using FluentAssertions;
using SocialMediaAssistant.Core.Interfaces;
using SocialMediaAssistant.Core.Entities;
using SocialMediaAssistant.Application.Services;
using SocialMediaAssistant.Application.Interfaces;
using System.Threading.Tasks;
using SocialMediaAssistant.Application.Models;


namespace SocialMediaAssistant.Application.Tests.Services;


public class ContentGenerationServiceTests
{
    private readonly Mock<IGeminiService> _geminiServiceMock;
    private readonly Mock<IImageGenerationService> _imageGenerationServiceMock;
    private readonly ContentGenerationService _contentGenerationService;

    public ContentGenerationServiceTests()
    {
        // Her test i√ßin sahte servislerimizi (mock) olu≈üturuyoruz.
        _geminiServiceMock = new Mock<IGeminiService>();
        _imageGenerationServiceMock = new Mock<IImageGenerationService>();
        
        // Asƒ±l test edeceƒüimiz servisi, bu sahte servislerle ba≈ülatƒ±yoruz.
        _contentGenerationService = new ContentGenerationService( _imageGenerationServiceMock.Object,_geminiServiceMock.Object);
    }

    [Fact]
    public async Task GenerateContentAsync_ShouldOrchestrateAiCallsCorrectly()
    {
        // ARRANGE (Hazƒ±rlƒ±k): Test i√ßin gerekli verileri ve sahte servislerin davranƒ±≈ülarƒ±nƒ± ayarla

        // 1. Girdi verilerini tanƒ±mla
        var userPrompt = "sahilde g√ºn batƒ±mƒ±";
        var context = new Workspace { BrandName = "Tatil K√∂y√º", Industry = "Turizm" };
        
        // 2. Servislerin d√∂nd√ºrmesini beklediƒüimiz sahte sonu√ßlarƒ± tanƒ±mla
        var expectedImagePrompt = "A cinematic, photorealistic image of a sunset on the beach";
        var expectedSocialText = "Sahilde harika bir g√ºn batƒ±mƒ±... üåÖ #tatil";
        var expectedImageUrl = "http://example.com/sunset.jpg";

        // 3. Sahte Gemini servisimize talimatlar ver:
        //    - Eƒüer sana i√ßinde "ƒ∞ngilizce bir prompt olu≈ütur" ge√ßen bir metin gelirse, 'expectedImagePrompt'u d√∂nd√ºr.
        _geminiServiceMock
            .Setup(s => s.GenerateTextAsync(It.Is<string>(p => p.Contains("ƒ∞ngilizce bir prompt olu≈ütur"))))
            .ReturnsAsync(expectedImagePrompt);
        
        //    - Eƒüer sana i√ßinde "sosyal medya i√ßerik √ºretme asistanƒ±sƒ±n" ge√ßen bir metin gelirse, 'expectedSocialText'i d√∂nd√ºr.
        _geminiServiceMock
            .Setup(s => s.GenerateTextAsync(It.Is<string>(p => p.Contains("sosyal medya i√ßerik √ºretme asistanƒ±sƒ±n"))))
            .ReturnsAsync(expectedSocialText);

        // 4. Sahte Resim servisimize talimat ver:
        //    - Eƒüer sana 'expectedImagePrompt' metni ile gelinirse, 'expectedImageUrl'√º d√∂nd√ºr.
        _imageGenerationServiceMock
            .Setup(s => s.GenerateImageUrlAsync(expectedImagePrompt))
            .ReturnsAsync(expectedImageUrl);

        // ACT (Eylem): Test etmek istediƒüimiz asƒ±l metodu √ßaƒüƒ±r
        var result = await _contentGenerationService.GenerateContentAsync(userPrompt, context);

        // ASSERT (Doƒürulama): Sonu√ßlarƒ±n ve servis √ßaƒürƒ±larƒ±nƒ±n doƒüruluƒüunu kontrol et
        
        // 1. D√∂nen nihai sonucun beklediƒüimiz gibi olup olmadƒ±ƒüƒ±nƒ± doƒürula.
        result.GeneratedText.Should().Be(expectedSocialText);
        result.GeneratedImageUrl.Should().Be(expectedImageUrl);

        // 2. 'IImageGenerationService'in, Gemini'dan d√∂nen DOƒûRU prompt ile sadece bir kez √ßaƒürƒ±ldƒ±ƒüƒ±nƒ± doƒürula.
        //    Bu, orkestrasyonun en kritik adƒ±mƒ±dƒ±r.
        _imageGenerationServiceMock.Verify(s => s.GenerateImageUrlAsync(expectedImagePrompt), Times.Once);
        
        // 3. 'IGeminiService'in toplamda iki kez √ßaƒürƒ±ldƒ±ƒüƒ±nƒ± doƒürula (biri metin, diƒüeri g√∂rsel prompt'u i√ßin).
        _geminiServiceMock.Verify(s => s.GenerateTextAsync(It.IsAny<string>()), Times.Exactly(2));
    }
}